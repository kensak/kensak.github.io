<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | AIへ秒読み]]></title>
  <link href="http://kensak.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://kensak.github.io/"/>
  <updated>2014-02-12T14:42:29+09:00</updated>
  <id>http://kensak.github.io/</id>
  <author>
    <name><![CDATA[榊原 研]]></name>
    <email><![CDATA[ken.sakakibar@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ランダムな置換とクヌース・シャッフル]]></title>
    <link href="http://kensak.github.io/blog/2014/01/13/knuth-shuffle/"/>
    <updated>2014-01-13T19:52:19+09:00</updated>
    <id>http://kensak.github.io/blog/2014/01/13/knuth-shuffle</id>
    <content type="html"><![CDATA[<p>ニューラルネットをプログラムするときに、ランダムな置換
（ここでは $ 0 $ から $ n-1 $ までの数がランダムな順で並んだものと考えます）が
必要になることがあります。例えば、</p>

<ul>
  <li>SGD with minibatch において、サンプルの配列の中からランダムな順序で 100 ずつ、
順番に取り出したい。ランダムな置換を使って配列のインデックスをかき混ぜればよい。</li>
  <li>Dropout において、n 個の入力のうちランダムに選んだ半分を 0 にセットしたい。
それぞれの入力を確率 0.5 で 0 にするのではちょうど半分になるとは限らない。
ランダムな置換を使えば、$ n / 2 $ 未満の要素を選ぶことによりちょうど半分
をランダムに選ぶことができる。半分ではなく他の比率でも大丈夫。</li>
</ul>

<p>ランダムな置換を得るには <a href="http://en.wikipedia.org/wiki/Random_permutation">Knuth shuffles</a>
という便利なアルゴリズムがあります。これは $ 0, 1, \ldots, n - 1 $ という
シーケンスに対し、$i$ 番目と、$ 0, \ldots, i $ からランダムに選んだ $j$
による $j$ 番目とを入れ替える、という操作を $i = 0, 1, \ldots, n-1$ について
繰り返すというものです。</p>

<p>変数の初期化も同時にやってしまうのが以下のコードです。</p>

<!-- more -->

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// get a random permutation of [0, 1, .., n-1] where n = vec.size().</span>
</span><span class='line'><span class="kt">void</span> <span class="n">GetRandomPermutation</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">vec</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Knuth shuffles algorithm</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">size_t</span> <span class="n">n</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="n">vec</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">vec</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="n">vec</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="kt">unsigned</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ここで <code>uniform(0, i)</code> は $0, 1, \ldots,i$ の中から同確率で一つ選んで
返す関数です。</p>

<p>9 行目で $i = j$ の場合、まだ初期化されていない値を自分に代入することになりますが、
そのときは次の 10 行目で $i$ が上書きされるので問題ありません。</p>

<p>このように簡単なアルゴリズムですが、
これで最終的に得られる置換の分布は一様であることが、次のように証明できます。</p>

<p>数学的帰納法を使います。  </p>

<p>「$k$ 番目のループ（$ k = 0, 1, \ldots, n-1 $）のあと、$ \mathrm{vec}[p]~~(p \in [0,k]) $ の値が $q \in [0, k]$ である確率は $p, q$
に関わらずすべて $1 / (k + 1)$ である」</p>

<p>という命題を $ \mathrm{Prop}(k) $ とします。証明したいのは $ \mathrm{Prop}(n-1) $ です。<br />
$ \mathrm{Prop}(0) $ は自明です。<br />
$ \mathrm{Prop}(k) $ を真だと仮定して $ \mathrm{Prop}(k+1) $ を証明すればいいわけですが、
$k+1$ 番目のループのあとに</p>

<ul>
  <li>$ \mathrm{vec}[p]~~(p \in [0,k]) $ が $q \in [0, k]$ である確率は、
「前回のループ後にその値であった確率」×「今回入れ替えられなかった確率」、
つまり
$$
(1 / (k + 1)) \cdot ((k + 1) / (k + 2)) = 1 / (k + 2)
$$</li>
  <li>$ \mathrm{vec}[p]~~(p \in [0,k]) $ が $k + 1$ である確率は、今回入れ替えられた確率、
つまり $1 / (k + 2)$</li>
  <li>$ \mathrm{vec}[k+1] $ が $q \in [0, k+1]$　である確率はやはり $1 / (k + 2)$</li>
</ul>

<p>というわけで  $ \mathrm{Prop}(k+1) $ が成り立ちます。</p>

<p>やっていることは実に単純ですが、ちょっと自分で思いつくのは難しそうな、
アルゴリズムらしいアルゴリズムですね。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CharRecog を GitHub にアップしました]]></title>
    <link href="http://kensak.github.io/blog/2014/01/10/uploaded-charrecog/"/>
    <updated>2014-01-10T22:20:53+09:00</updated>
    <id>http://kensak.github.io/blog/2014/01/10/uploaded-charrecog</id>
    <content type="html"><![CDATA[<p>ニューラルネットによる文字認識プログラム CharRecog を
<a href="https://github.com/kensak/CharRecog">GitHub にアップしました</a>。</p>

<h3 id="section">特徴</h3>
<ul>
  <li>C++ で作成。OpenCV の ANN_MLP クラスを参考に、コアの部分はゼロから書きなおしました。</li>
  <li>並列処理 : インテル TBB、OpenMP, C++ AMP などを使い、マルチコア CPU や GPU による並列処理をおこなっています。</li>
  <li>行列計算による高速化 : すべてのサンプル画像を処理する際、できるだけループを回さず一回の行列計算により処理をおこないます。</li>
  <li>さまざまな手法への対応 : autoencoding, convolutional layer, max pooling, maxout, dropout の各手法や
入力画像のランダムな affine 変換などに対応しています。</li>
  <li>ビルド済み実行ファイルでは float で計算をおこないますが、ソースを一ヶ所変更してリビルドすれば double にも対応します。</li>
  <li>学習された重みを画像として出力できます。</li>
</ul>

<p>すぐに使えるよう 64 ビット版のバイナリもアップしています。
MNIST 画像セットを使って autoencoding や dropout などの実験が簡単におこなえます。</p>

<p>今後も気になる手法があればインプリメントしていく予定です。
また、画像認識や言語処理のための高速なNNエンジンとしても使えるようにしていきたい。</p>

]]></content>
  </entry>
  
</feed>
