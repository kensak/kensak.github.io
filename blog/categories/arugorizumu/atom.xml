<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: アルゴリズム | AIへ秒読み]]></title>
  <link href="http://kensak.github.io/blog/categories/arugorizumu/atom.xml" rel="self"/>
  <link href="http://kensak.github.io/"/>
  <updated>2014-01-13T21:47:38+09:00</updated>
  <id>http://kensak.github.io/</id>
  <author>
    <name><![CDATA[榊原 研]]></name>
    <email><![CDATA[ken.sakakibar@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ランダムな置換とクヌース・シャッフル]]></title>
    <link href="http://kensak.github.io/blog/2014/01/13/knuth-shuffle/"/>
    <updated>2014-01-13T19:52:19+09:00</updated>
    <id>http://kensak.github.io/blog/2014/01/13/knuth-shuffle</id>
    <content type="html"><![CDATA[<p>ニューラルネットをプログラムするときに、ランダムな置換
（≒ 0 から n-1 までの数がランダムな順で並んだもの）が
必要になることがあります。例えば、</p>

<ul>
  <li>SGD with minibatch において、サンプルの中からランダムな順序で 100 ずつ、
順番に取り出したい。</li>
  <li>Dropout において、n 個の入力のうちランダムに選んだ半分を 0 にセットしたい。
（それぞれの入力を確率 0.5 で 0 にするのではちょうど半分になるとは限らない。）</li>
</ul>

<p>これには <a href="http://en.wikipedia.org/wiki/Random_permutation">Knuth shuffles</a>
という便利なアルゴリズムがあります。</p>

<!-- more -->

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// get a random permutation of 0, 1, .., len-1]] where len = vec.size().</span>
</span><span class='line'><span class="kt">void</span> <span class="n">GetRandomPermutation</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">vec</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Knuth shuffles algorithm</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">size_t</span> <span class="n">len</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="n">vec</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">vec</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="n">vec</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="kt">unsigned</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ここで <code>uniform(0, i)</code> は $0, 1, \ldots,i$ の中から同確率で数を一つ選んで
返す関数だとします。</p>

<p>このアルゴリズムは要するに $i$ 回目のループで、まず <code>vec[i]</code> に $i$ を入れ、
さらに $[0, i]$ からランダムに $j$ を選んで <code>vec[i]</code> と <code>vec[j]</code> の値を入れ替えているだけです。</p>

<p>（9 行目で $i = j$ の場合、まだ初期化されていない値を自分に代入することになりますが、
そのときは次の 10 行目で $i$ が上書きされるので問題ありません。）</p>

<p>このように簡単なアルゴリズムですが、
これで最終的に得られる置換の分布は一様であることが、次のように証明できます。</p>

<p>数学的帰納法を使います。  </p>

<blockquote>
  <p>$k$ 番目のループのあと、vec[p] $(p \in [0,k])$ の値が $q \in [0, k]$ である確率は $p, q$
に関わらずすべて $1 / (k + 1)$ である</p>
</blockquote>

<p>という命題を $P(k)$ とします。<br />
$P(0)$ は自明です。<br />
$P(k)$ を真だと仮定して $P(k+1)$ を証明すればいいわけですが、$k+1$ 番目のループのあと、</p>

<ul>
  <li><code>vec[p]</code> $(p \in [0,k])$ が $q \in [0, k]$ である確率は、
「前回のループ後にその値であった確率」×「今回入れ替えられなかった確率」、
つまり
$$
(1 / (k + 1)) \cdot ((k + 1) / (k + 2)) = 1 / (k + 2)
$$</li>
  <li><code>vec[p]</code> $(p \in [0,k])$ が $k + 1$ である確率は、今回入れ替えられた確率、
つまり $1 / (k + 2)$</li>
  <li><code>vec[k+1]</code> が $q \in [0, k+1]$　である確率はやはり $1 / (k + 2)$</li>
</ul>

<p>というわけで  $P(k+1)$ が成り立ちます。</p>

]]></content>
  </entry>
  
</feed>
